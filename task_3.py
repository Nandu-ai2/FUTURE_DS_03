# -*- coding: utf-8 -*-
"""Task_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1st4l5FDJV3grVAFvFlHszlkgUoNqMOcP
"""

import pandas as pd
df = pd.read_csv('student_feedback.csv')
df.head()

print(df.info())

# df['comments'] = df['comments'].str.lower().str.strip()

print(df.isnull().sum())

"""As you can see from the output above, there are no missing values in the DataFrame. Also, all the columns are of integer type, which means there are no text columns to normalize."""

df = df.drop_duplicates()
print("Shape of the DataFrame after removing duplicates:", df.shape)

rating_columns = [col for col in df.columns if col not in ['Unnamed: 0', 'Student ID']]
print("Summary statistics for rating columns:")
display(df[rating_columns].agg(['mean', 'median', lambda x: x.mode()[0]]).T.rename(columns={'<lambda>': 'mode'}))

# Commented out IPython magic to ensure Python compatibility.
# %pip install textblob vaderSentiment

import matplotlib.pyplot as plt
import seaborn as sns

rating_columns = [col for col in df.columns if col not in ['Unnamed: 0', 'Student ID']]

for col in rating_columns:
    plt.figure(figsize=(8, 6))
    sns.countplot(data=df, x=col, palette='viridis')
    plt.title(f'Distribution of Ratings for: {col}')
    plt.xlabel('Rating')
    plt.ylabel('Count')
    plt.show()

df_melted = df.melt(
    value_vars=rating_columns,
    var_name='question',
    value_name='rating'
)

heatmap_data = df_melted.groupby('question')['rating'].mean().reset_index()
heatmap_data = heatmap_data.pivot_table(
    index='question',
    values='rating',
    aggfunc='mean'
)

plt.figure(figsize=(10, 8))
sns.heatmap(heatmap_data, annot=True, fmt=".2f", cmap='YlGnBu', linewidths=0.5, linecolor='white')
plt.title('Average Ratings Heatmap by Question')
plt.yticks(rotation=0)
plt.show()

from wordcloud import WordCloud
import matplotlib.pyplot as plt

mean_ratings = df[rating_columns].mean()
plt.figure(figsize=(12,6))
mean_ratings.plot(kind='bar', color='skyblue')
plt.title('Average Ratings for Each Feedback Category')
plt.ylabel('Average Rating (Scale 1-10 or as per)')
plt.xticks(rotation=45, ha='right')
plt.show()

import numpy as np

labels = rating_columns
num_vars = len(labels)
values = mean_ratings.values.flatten().tolist()
values += values[:1]
angles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()
angles += angles[:1]
fig, ax = plt.subplots(figsize=(8,8), subplot_kw=dict(polar=True))
ax.plot(angles, values, color='blue', linewidth=2)
ax.fill(angles, values, color='skyblue', alpha=0.4)
ax.set_xticks(angles[:-1])
ax.set_xticklabels(labels, fontsize=10)
ax.set_yticklabels([])
ax.set_title('Average Feedback Ratings Radar Chart', size=15, y=1.1)
plt.show()

plt.figure(figsize=(14,8))
sns.boxplot(data=df[rating_columns])
plt.title('Rating Distribution by Feedback Category')
plt.xticks(rotation=45, ha='right')
plt.show()

rating_counts = df['Well versed with the subject'].value_counts()

plt.figure(figsize=(8, 8))
plt.pie(rating_counts, labels=rating_counts.index, autopct='%1.1f%%',
        startangle=140, colors=sns.color_palette('viridis', len(rating_counts)))
plt.title('Distribution of Ratings for: Well versed with the subject')
plt.axis('equal')
plt.show()

bubble_data = df.groupby(['Well versed with the subject', 'Explains concepts in an understandable way']).size().reset_index(name='count')

plt.figure(figsize=(12, 8))
sns.scatterplot(data=bubble_data, x='Well versed with the subject', y='Explains concepts in an understandable way', size='count', sizes=(50, 2000), alpha=0.6, legend='brief')
plt.title('Bubble Chart of Ratings: Well versed with the subject vs. Explains concepts')
plt.xlabel('Well versed with the subject Rating')
plt.ylabel('Explains concepts in an understandable way Rating')
plt.grid(True)
plt.show()

df['overall_satisfaction'] = df[rating_cols].mean(axis=1)
average_overall_satisfaction = df['overall_satisfaction'].mean()
print("Average Overall Satisfaction:", average_overall_satisfaction)